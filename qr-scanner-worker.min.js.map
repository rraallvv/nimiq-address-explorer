{"version":3,"file":"qr-scanner-worker.min.js","sources":["src/worker.js"],"sourcesContent":["/* eslint-disable */\n// No type annotations as this code was compiled from typescript anyways and disabled eslint as the original\n// project uses different linting rules.\n\n// Qr Scanning Library taken from https://github.com/danimoh/jsQR\n// and combined with worker.js from https://github.com/nimiq/qr-scanner\n(() => {\n    class BitMatrix {\n        static createEmpty(width, height) {\n            return new BitMatrix(new Uint8ClampedArray(width * height), width);\n        }\n        constructor(data, width) {\n            this.width = width;\n            this.height = data.length / width;\n            this.data = data;\n        }\n        get(x, y) {\n            if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n                return false;\n            }\n            return !!this.data[y * this.width + x];\n        }\n        set(x, y, v) {\n            this.data[y * this.width + x] = v ? 1 : 0;\n        }\n        setRegion(left, top, width, height, v) {\n            for (let y = top; y < top + height; y++) {\n                for (let x = left; x < left + width; x++) {\n                    this.set(x, y, !!v);\n                }\n            }\n        }\n    }\n\n    const REGION_SIZE = 8;\n    const MIN_DYNAMIC_RANGE = 24;\n    function numBetween(value, min, max) {\n        return value < min ? min : value > max ? max : value;\n    }\n// Like BitMatrix but accepts arbitry Uint8 values\n    class Matrix {\n        constructor(width, height, buffer) {\n            this.width = width;\n            const bufferSize = width * height;\n            if (buffer && buffer.length !== bufferSize) {\n                throw new Error(\"Wrong buffer size\");\n            }\n            this.data = buffer || new Uint8ClampedArray(bufferSize);\n        }\n        get(x, y) {\n            return this.data[y * this.width + x];\n        }\n        set(x, y, value) {\n            this.data[y * this.width + x] = value;\n        }\n    }\n    function binarize(data, width, height, returnInverted, greyscaleWeights, canOverwriteImage) {\n        const pixelCount = width * height;\n        if (data.length !== pixelCount * 4) {\n            throw new Error(\"Malformed data passed to binarizer.\");\n        }\n        // assign the greyscale and binary image within the rgba buffer as the rgba image will not be needed after conversion\n        let bufferOffset = 0;\n        // Convert image to greyscale\n        let greyscaleBuffer;\n        if (canOverwriteImage) {\n            greyscaleBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n            bufferOffset += pixelCount;\n        }\n        const greyscalePixels = new Matrix(width, height, greyscaleBuffer);\n        if (greyscaleWeights.useIntegerApproximation) {\n            for (let y = 0; y < height; y++) {\n                for (let x = 0; x < width; x++) {\n                    const pixelPosition = (y * width + x) * 4;\n                    const r = data[pixelPosition];\n                    const g = data[pixelPosition + 1];\n                    const b = data[pixelPosition + 2];\n                    greyscalePixels.set(x, y,\n                        // tslint:disable-next-line no-bitwise\n                        (greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b + 128) >> 8);\n                }\n            }\n        }\n        else {\n            for (let y = 0; y < height; y++) {\n                for (let x = 0; x < width; x++) {\n                    const pixelPosition = (y * width + x) * 4;\n                    const r = data[pixelPosition];\n                    const g = data[pixelPosition + 1];\n                    const b = data[pixelPosition + 2];\n                    greyscalePixels.set(x, y, greyscaleWeights.red * r + greyscaleWeights.green * g + greyscaleWeights.blue * b);\n                }\n            }\n        }\n        const horizontalRegionCount = Math.ceil(width / REGION_SIZE);\n        const verticalRegionCount = Math.ceil(height / REGION_SIZE);\n        const blackPointsCount = horizontalRegionCount * verticalRegionCount;\n        let blackPointsBuffer;\n        if (canOverwriteImage) {\n            blackPointsBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, blackPointsCount);\n            bufferOffset += blackPointsCount;\n        }\n        const blackPoints = new Matrix(horizontalRegionCount, verticalRegionCount, blackPointsBuffer);\n        for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\n            for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\n                let min = Infinity;\n                let max = 0;\n                for (let y = 0; y < REGION_SIZE; y++) {\n                    for (let x = 0; x < REGION_SIZE; x++) {\n                        const pixelLumosity = greyscalePixels.get(hortizontalRegion * REGION_SIZE + x, verticalRegion * REGION_SIZE + y);\n                        min = Math.min(min, pixelLumosity);\n                        max = Math.max(max, pixelLumosity);\n                    }\n                }\n                // We could also compute the real average of all pixels but following the assumption that the qr code consists\n                // of bright and dark pixels and essentially not much in between, by (min + max)/2 we make the cut really between\n                // those two classes. If using the average over all pixel in a block of mostly bright pixels and few dark pixels,\n                // the avg would tend to the bright side and darker bright pixels could be interpreted as dark.\n                let average = (min + max) / 2;\n                // Small bias towards black by moving the threshold up. We do this, as in the finder patterns white holes tend\n                // to appear which makes them undetectable.\n                const blackBias = 1.1;\n                average = Math.min(255, average * blackBias);\n                if (max - min <= MIN_DYNAMIC_RANGE) {\n                    // If variation within the block is low, assume this is a block with only light or only\n                    // dark pixels. In that case we do not want to use the average, as it would divide this\n                    // low contrast area into black and white pixels, essentially creating data out of noise.\n                    //\n                    // Default the blackpoint for these blocks to be half the min - effectively white them out\n                    average = min / 2;\n                    if (verticalRegion > 0 && hortizontalRegion > 0) {\n                        // Correct the \"white background\" assumption for blocks that have neighbors by comparing\n                        // the pixels in this block to the previously calculated black points. This is based on\n                        // the fact that dark barcode symbology is always surrounded by some amount of light\n                        // background for which reasonable black point estimates were made. The bp estimated at\n                        // the boundaries is used for the interior.\n                        // The (min < bp) is arbitrary but works better than other heuristics that were tried.\n                        const averageNeighborBlackPoint = (blackPoints.get(hortizontalRegion, verticalRegion - 1) +\n                            (2 * blackPoints.get(hortizontalRegion - 1, verticalRegion)) +\n                            blackPoints.get(hortizontalRegion - 1, verticalRegion - 1)) / 4;\n                        if (min < averageNeighborBlackPoint) {\n                            average = averageNeighborBlackPoint; // no need to apply black bias as already applied to neighbors\n                        }\n                    }\n                }\n                blackPoints.set(hortizontalRegion, verticalRegion, average);\n            }\n        }\n        let binarized;\n        if (canOverwriteImage) {\n            const binarizedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n            bufferOffset += pixelCount;\n            binarized = new BitMatrix(binarizedBuffer, width);\n        }\n        else {\n            binarized = BitMatrix.createEmpty(width, height);\n        }\n        let inverted = null;\n        if (returnInverted) {\n            if (canOverwriteImage) {\n                const invertedBuffer = new Uint8ClampedArray(data.buffer, bufferOffset, pixelCount);\n                inverted = new BitMatrix(invertedBuffer, width);\n            }\n            else {\n                inverted = BitMatrix.createEmpty(width, height);\n            }\n        }\n        for (let verticalRegion = 0; verticalRegion < verticalRegionCount; verticalRegion++) {\n            for (let hortizontalRegion = 0; hortizontalRegion < horizontalRegionCount; hortizontalRegion++) {\n                const left = numBetween(hortizontalRegion, 2, horizontalRegionCount - 3);\n                const top = numBetween(verticalRegion, 2, verticalRegionCount - 3);\n                let sum = 0;\n                for (let xRegion = -2; xRegion <= 2; xRegion++) {\n                    for (let yRegion = -2; yRegion <= 2; yRegion++) {\n                        sum += blackPoints.get(left + xRegion, top + yRegion);\n                    }\n                }\n                const threshold = sum / 25;\n                for (let xRegion = 0; xRegion < REGION_SIZE; xRegion++) {\n                    for (let yRegion = 0; yRegion < REGION_SIZE; yRegion++) {\n                        const x = hortizontalRegion * REGION_SIZE + xRegion;\n                        const y = verticalRegion * REGION_SIZE + yRegion;\n                        const lum = greyscalePixels.get(x, y);\n                        binarized.set(x, y, lum <= threshold);\n                        if (returnInverted) {\n                            inverted.set(x, y, !(lum <= threshold));\n                        }\n                    }\n                }\n            }\n        }\n        if (returnInverted) {\n            return { binarized, inverted };\n        }\n        return { binarized };\n    }\n\n// tslint:disable:no-bitwise\n    class BitStream {\n        constructor(bytes) {\n            this.byteOffset = 0;\n            this.bitOffset = 0;\n            this.bytes = bytes;\n        }\n        readBits(numBits) {\n            if (numBits < 1 || numBits > 32 || numBits > this.available()) {\n                throw new Error(\"Cannot read \" + numBits.toString() + \" bits\");\n            }\n            let result = 0;\n            // First, read remainder from current byte\n            if (this.bitOffset > 0) {\n                const bitsLeft = 8 - this.bitOffset;\n                const toRead = numBits < bitsLeft ? numBits : bitsLeft;\n                const bitsToNotRead = bitsLeft - toRead;\n                const mask = (0xFF >> (8 - toRead)) << bitsToNotRead;\n                result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\n                numBits -= toRead;\n                this.bitOffset += toRead;\n                if (this.bitOffset === 8) {\n                    this.bitOffset = 0;\n                    this.byteOffset++;\n                }\n            }\n            // Next read whole bytes\n            if (numBits > 0) {\n                while (numBits >= 8) {\n                    result = (result << 8) | (this.bytes[this.byteOffset] & 0xFF);\n                    this.byteOffset++;\n                    numBits -= 8;\n                }\n                // Finally read a partial byte\n                if (numBits > 0) {\n                    const bitsToNotRead = 8 - numBits;\n                    const mask = (0xFF >> bitsToNotRead) << bitsToNotRead;\n                    result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);\n                    this.bitOffset += numBits;\n                }\n            }\n            return result;\n        }\n        available() {\n            return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\n        }\n    }\n\n// tslint:disable:no-bitwise\n    var Mode;\n    (function (Mode) {\n        Mode[\"Numeric\"] = \"numeric\";\n        Mode[\"Alphanumeric\"] = \"alphanumeric\";\n        Mode[\"Byte\"] = \"byte\";\n        Mode[\"Kanji\"] = \"kanji\";\n        Mode[\"ECI\"] = \"eci\";\n    })(Mode || (Mode = {}));\n    var ModeByte;\n    (function (ModeByte) {\n        ModeByte[ModeByte[\"Terminator\"] = 0] = \"Terminator\";\n        ModeByte[ModeByte[\"Numeric\"] = 1] = \"Numeric\";\n        ModeByte[ModeByte[\"Alphanumeric\"] = 2] = \"Alphanumeric\";\n        ModeByte[ModeByte[\"Byte\"] = 4] = \"Byte\";\n        ModeByte[ModeByte[\"Kanji\"] = 8] = \"Kanji\";\n        ModeByte[ModeByte[\"ECI\"] = 7] = \"ECI\";\n        // StructuredAppend = 0x3,\n        // FNC1FirstPosition = 0x5,\n        // FNC1SecondPosition = 0x9,\n    })(ModeByte || (ModeByte = {}));\n    function decodeNumeric(stream, size) {\n        const bytes = [];\n        let text = \"\";\n        const characterCountSize = [10, 12, 14][size];\n        let length = stream.readBits(characterCountSize);\n        // Read digits in groups of 3\n        while (length >= 3) {\n            const num = stream.readBits(10);\n            if (num >= 1000) {\n                throw new Error(\"Invalid numeric value above 999\");\n            }\n            const a = Math.floor(num / 100);\n            const b = Math.floor(num / 10) % 10;\n            const c = num % 10;\n            bytes.push(48 + a, 48 + b, 48 + c);\n            text += a.toString() + b.toString() + c.toString();\n            length -= 3;\n        }\n        // If the number of digits aren't a multiple of 3, the remaining digits are special cased.\n        if (length === 2) {\n            const num = stream.readBits(7);\n            if (num >= 100) {\n                throw new Error(\"Invalid numeric value above 99\");\n            }\n            const a = Math.floor(num / 10);\n            const b = num % 10;\n            bytes.push(48 + a, 48 + b);\n            text += a.toString() + b.toString();\n        }\n        else if (length === 1) {\n            const num = stream.readBits(4);\n            if (num >= 10) {\n                throw new Error(\"Invalid numeric value above 9\");\n            }\n            bytes.push(48 + num);\n            text += num.toString();\n        }\n        return { bytes, text };\n    }\n    const AlphanumericCharacterCodes = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\n        \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\",\n        \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\",\n        \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n        \" \", \"$\", \"%\", \"*\", \"+\", \"-\", \".\", \"/\", \":\",\n    ];\n    function decodeAlphanumeric(stream, size) {\n        const bytes = [];\n        let text = \"\";\n        const characterCountSize = [9, 11, 13][size];\n        let length = stream.readBits(characterCountSize);\n        while (length >= 2) {\n            const v = stream.readBits(11);\n            const a = Math.floor(v / 45);\n            const b = v % 45;\n            bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0), AlphanumericCharacterCodes[b].charCodeAt(0));\n            text += AlphanumericCharacterCodes[a] + AlphanumericCharacterCodes[b];\n            length -= 2;\n        }\n        if (length === 1) {\n            const a = stream.readBits(6);\n            bytes.push(AlphanumericCharacterCodes[a].charCodeAt(0));\n            text += AlphanumericCharacterCodes[a];\n        }\n        return { bytes, text };\n    }\n    function decodeByte(stream, size) {\n        const bytes = [];\n        let text = \"\";\n        const characterCountSize = [8, 16, 16][size];\n        const length = stream.readBits(characterCountSize);\n        for (let i = 0; i < length; i++) {\n            const b = stream.readBits(8);\n            bytes.push(b);\n        }\n        try {\n            text += decodeURIComponent(bytes.map(b => `%${(\"0\" + b.toString(16)).substr(-2)}`).join(\"\"));\n        }\n        catch (_a) {\n            // failed to decode\n        }\n        return { bytes, text };\n    }\n    function decodeKanji(stream, size) {\n        const bytes = [];\n        const characterCountSize = [8, 10, 12][size];\n        const length = stream.readBits(characterCountSize);\n        for (let i = 0; i < length; i++) {\n            const k = stream.readBits(13);\n            let c = (Math.floor(k / 0xC0) << 8) | (k % 0xC0);\n            if (c < 0x1F00) {\n                c += 0x8140;\n            }\n            else {\n                c += 0xC140;\n            }\n            bytes.push(c >> 8, c & 0xFF);\n        }\n        const text = new TextDecoder(\"shift-jis\").decode(Uint8Array.from(bytes));\n        return { bytes, text };\n    }\n    function decode(data, version) {\n        const stream = new BitStream(data);\n        // There are 3 'sizes' based on the version. 1-9 is small (0), 10-26 is medium (1) and 27-40 is large (2).\n        const size = version <= 9 ? 0 : version <= 26 ? 1 : 2;\n        const result = {\n            text: \"\",\n            bytes: [],\n            chunks: [],\n        };\n        while (stream.available() >= 4) {\n            const mode = stream.readBits(4);\n            if (mode === ModeByte.Terminator) {\n                return result;\n            }\n            else if (mode === ModeByte.ECI) {\n                if (stream.readBits(1) === 0) {\n                    result.chunks.push({\n                        type: Mode.ECI,\n                        assignmentNumber: stream.readBits(7),\n                    });\n                }\n                else if (stream.readBits(1) === 0) {\n                    result.chunks.push({\n                        type: Mode.ECI,\n                        assignmentNumber: stream.readBits(14),\n                    });\n                }\n                else if (stream.readBits(1) === 0) {\n                    result.chunks.push({\n                        type: Mode.ECI,\n                        assignmentNumber: stream.readBits(21),\n                    });\n                }\n                else {\n                    // ECI data seems corrupted\n                    result.chunks.push({\n                        type: Mode.ECI,\n                        assignmentNumber: -1,\n                    });\n                }\n            }\n            else if (mode === ModeByte.Numeric) {\n                const numericResult = decodeNumeric(stream, size);\n                result.text += numericResult.text;\n                result.bytes.push(...numericResult.bytes);\n                result.chunks.push({\n                    type: Mode.Numeric,\n                    text: numericResult.text,\n                });\n            }\n            else if (mode === ModeByte.Alphanumeric) {\n                const alphanumericResult = decodeAlphanumeric(stream, size);\n                result.text += alphanumericResult.text;\n                result.bytes.push(...alphanumericResult.bytes);\n                result.chunks.push({\n                    type: Mode.Alphanumeric,\n                    text: alphanumericResult.text,\n                });\n            }\n            else if (mode === ModeByte.Byte) {\n                const byteResult = decodeByte(stream, size);\n                result.text += byteResult.text;\n                result.bytes.push(...byteResult.bytes);\n                result.chunks.push({\n                    type: Mode.Byte,\n                    bytes: byteResult.bytes,\n                    text: byteResult.text,\n                });\n            }\n            else if (mode === ModeByte.Kanji) {\n                const kanjiResult = decodeKanji(stream, size);\n                result.text += kanjiResult.text;\n                result.bytes.push(...kanjiResult.bytes);\n                result.chunks.push({\n                    type: Mode.Kanji,\n                    bytes: kanjiResult.bytes,\n                    text: kanjiResult.text,\n                });\n            }\n        }\n        // If there is no data left, or the remaining bits are all 0, then that counts as a termination marker\n        if (stream.available() === 0 || stream.readBits(stream.available()) === 0) {\n            return result;\n        }\n    }\n\n    class GenericGFPoly {\n        constructor(field, coefficients) {\n            if (coefficients.length === 0) {\n                throw new Error(\"No coefficients.\");\n            }\n            this.field = field;\n            const coefficientsLength = coefficients.length;\n            if (coefficientsLength > 1 && coefficients[0] === 0) {\n                // Leading term must be non-zero for anything except the constant polynomial \"0\"\n                let firstNonZero = 1;\n                while (firstNonZero < coefficientsLength && coefficients[firstNonZero] === 0) {\n                    firstNonZero++;\n                }\n                if (firstNonZero === coefficientsLength) {\n                    this.coefficients = field.zero.coefficients;\n                }\n                else {\n                    this.coefficients = new Uint8ClampedArray(coefficientsLength - firstNonZero);\n                    for (let i = 0; i < this.coefficients.length; i++) {\n                        this.coefficients[i] = coefficients[firstNonZero + i];\n                    }\n                }\n            }\n            else {\n                this.coefficients = coefficients;\n            }\n        }\n        degree() {\n            return this.coefficients.length - 1;\n        }\n        isZero() {\n            return this.coefficients[0] === 0;\n        }\n        getCoefficient(degree) {\n            return this.coefficients[this.coefficients.length - 1 - degree];\n        }\n        addOrSubtract(other) {\n            if (this.isZero()) {\n                return other;\n            }\n            if (other.isZero()) {\n                return this;\n            }\n            let smallerCoefficients = this.coefficients;\n            let largerCoefficients = other.coefficients;\n            if (smallerCoefficients.length > largerCoefficients.length) {\n                [smallerCoefficients, largerCoefficients] = [largerCoefficients, smallerCoefficients];\n            }\n            const sumDiff = new Uint8ClampedArray(largerCoefficients.length);\n            const lengthDiff = largerCoefficients.length - smallerCoefficients.length;\n            for (let i = 0; i < lengthDiff; i++) {\n                sumDiff[i] = largerCoefficients[i];\n            }\n            for (let i = lengthDiff; i < largerCoefficients.length; i++) {\n                sumDiff[i] = addOrSubtractGF(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\n            }\n            return new GenericGFPoly(this.field, sumDiff);\n        }\n        multiply(scalar) {\n            if (scalar === 0) {\n                return this.field.zero;\n            }\n            if (scalar === 1) {\n                return this;\n            }\n            const size = this.coefficients.length;\n            const product = new Uint8ClampedArray(size);\n            for (let i = 0; i < size; i++) {\n                product[i] = this.field.multiply(this.coefficients[i], scalar);\n            }\n            return new GenericGFPoly(this.field, product);\n        }\n        multiplyPoly(other) {\n            if (this.isZero() || other.isZero()) {\n                return this.field.zero;\n            }\n            const aCoefficients = this.coefficients;\n            const aLength = aCoefficients.length;\n            const bCoefficients = other.coefficients;\n            const bLength = bCoefficients.length;\n            const product = new Uint8ClampedArray(aLength + bLength - 1);\n            for (let i = 0; i < aLength; i++) {\n                const aCoeff = aCoefficients[i];\n                for (let j = 0; j < bLength; j++) {\n                    product[i + j] = addOrSubtractGF(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\n                }\n            }\n            return new GenericGFPoly(this.field, product);\n        }\n        multiplyByMonomial(degree, coefficient) {\n            if (degree < 0) {\n                throw new Error(\"Invalid degree less than 0\");\n            }\n            if (coefficient === 0) {\n                return this.field.zero;\n            }\n            const size = this.coefficients.length;\n            const product = new Uint8ClampedArray(size + degree);\n            for (let i = 0; i < size; i++) {\n                product[i] = this.field.multiply(this.coefficients[i], coefficient);\n            }\n            return new GenericGFPoly(this.field, product);\n        }\n        evaluateAt(a) {\n            let result = 0;\n            if (a === 0) {\n                // Just return the x^0 coefficient\n                return this.getCoefficient(0);\n            }\n            const size = this.coefficients.length;\n            if (a === 1) {\n                // Just the sum of the coefficients\n                this.coefficients.forEach((coefficient) => {\n                    result = addOrSubtractGF(result, coefficient);\n                });\n                return result;\n            }\n            result = this.coefficients[0];\n            for (let i = 1; i < size; i++) {\n                result = addOrSubtractGF(this.field.multiply(a, result), this.coefficients[i]);\n            }\n            return result;\n        }\n    }\n\n    function addOrSubtractGF(a, b) {\n        return a ^ b; // tslint:disable-line:no-bitwise\n    }\n    class GenericGF {\n        constructor(primitive, size, genBase) {\n            this.primitive = primitive;\n            this.size = size;\n            this.generatorBase = genBase;\n            this.expTable = new Array(this.size);\n            this.logTable = new Array(this.size);\n            let x = 1;\n            for (let i = 0; i < this.size; i++) {\n                this.expTable[i] = x;\n                x = x * 2;\n                if (x >= this.size) {\n                    x = (x ^ this.primitive) & (this.size - 1); // tslint:disable-line:no-bitwise\n                }\n            }\n            for (let i = 0; i < this.size - 1; i++) {\n                this.logTable[this.expTable[i]] = i;\n            }\n            this.zero = new GenericGFPoly(this, Uint8ClampedArray.from([0]));\n            this.one = new GenericGFPoly(this, Uint8ClampedArray.from([1]));\n        }\n        multiply(a, b) {\n            if (a === 0 || b === 0) {\n                return 0;\n            }\n            return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\n        }\n        inverse(a) {\n            if (a === 0) {\n                throw new Error(\"Can't invert 0\");\n            }\n            return this.expTable[this.size - this.logTable[a] - 1];\n        }\n        buildMonomial(degree, coefficient) {\n            if (degree < 0) {\n                throw new Error(\"Invalid monomial degree less than 0\");\n            }\n            if (coefficient === 0) {\n                return this.zero;\n            }\n            const coefficients = new Uint8ClampedArray(degree + 1);\n            coefficients[0] = coefficient;\n            return new GenericGFPoly(this, coefficients);\n        }\n        log(a) {\n            if (a === 0) {\n                throw new Error(\"Can't take log(0)\");\n            }\n            return this.logTable[a];\n        }\n        exp(a) {\n            return this.expTable[a];\n        }\n    }\n\n    function runEuclideanAlgorithm(field, a, b, R) {\n        // Assume a's degree is >= b's\n        if (a.degree() < b.degree()) {\n            [a, b] = [b, a];\n        }\n        let rLast = a;\n        let r = b;\n        let tLast = field.zero;\n        let t = field.one;\n        // Run Euclidean algorithm until r's degree is less than R/2\n        while (r.degree() >= R / 2) {\n            const rLastLast = rLast;\n            const tLastLast = tLast;\n            rLast = r;\n            tLast = t;\n            // Divide rLastLast by rLast, with quotient in q and remainder in r\n            if (rLast.isZero()) {\n                // Euclidean algorithm already terminated?\n                return null;\n            }\n            r = rLastLast;\n            let q = field.zero;\n            const denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());\n            const dltInverse = field.inverse(denominatorLeadingTerm);\n            while (r.degree() >= rLast.degree() && !r.isZero()) {\n                const degreeDiff = r.degree() - rLast.degree();\n                const scale = field.multiply(r.getCoefficient(r.degree()), dltInverse);\n                q = q.addOrSubtract(field.buildMonomial(degreeDiff, scale));\n                r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\n            }\n            t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);\n            if (r.degree() >= rLast.degree()) {\n                return null;\n            }\n        }\n        const sigmaTildeAtZero = t.getCoefficient(0);\n        if (sigmaTildeAtZero === 0) {\n            return null;\n        }\n        const inverse = field.inverse(sigmaTildeAtZero);\n        return [t.multiply(inverse), r.multiply(inverse)];\n    }\n    function findErrorLocations(field, errorLocator) {\n        // This is a direct application of Chien's search\n        const numErrors = errorLocator.degree();\n        if (numErrors === 1) {\n            return [errorLocator.getCoefficient(1)];\n        }\n        const result = new Array(numErrors);\n        let errorCount = 0;\n        for (let i = 1; i < field.size && errorCount < numErrors; i++) {\n            if (errorLocator.evaluateAt(i) === 0) {\n                result[errorCount] = field.inverse(i);\n                errorCount++;\n            }\n        }\n        if (errorCount !== numErrors) {\n            return null;\n        }\n        return result;\n    }\n    function findErrorMagnitudes(field, errorEvaluator, errorLocations) {\n        // This is directly applying Forney's Formula\n        const s = errorLocations.length;\n        const result = new Array(s);\n        for (let i = 0; i < s; i++) {\n            const xiInverse = field.inverse(errorLocations[i]);\n            let denominator = 1;\n            for (let j = 0; j < s; j++) {\n                if (i !== j) {\n                    denominator = field.multiply(denominator, addOrSubtractGF(1, field.multiply(errorLocations[j], xiInverse)));\n                }\n            }\n            result[i] = field.multiply(errorEvaluator.evaluateAt(xiInverse), field.inverse(denominator));\n            if (field.generatorBase !== 0) {\n                result[i] = field.multiply(result[i], xiInverse);\n            }\n        }\n        return result;\n    }\n    function decode$1(bytes, twoS) {\n        const outputBytes = new Uint8ClampedArray(bytes.length);\n        outputBytes.set(bytes);\n        const field = new GenericGF(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\n        const poly = new GenericGFPoly(field, outputBytes);\n        const syndromeCoefficients = new Uint8ClampedArray(twoS);\n        let error = false;\n        for (let s = 0; s < twoS; s++) {\n            const evaluation = poly.evaluateAt(field.exp(s + field.generatorBase));\n            syndromeCoefficients[syndromeCoefficients.length - 1 - s] = evaluation;\n            if (evaluation !== 0) {\n                error = true;\n            }\n        }\n        if (!error) {\n            return outputBytes;\n        }\n        const syndrome = new GenericGFPoly(field, syndromeCoefficients);\n        const sigmaOmega = runEuclideanAlgorithm(field, field.buildMonomial(twoS, 1), syndrome, twoS);\n        if (sigmaOmega === null) {\n            return null;\n        }\n        const errorLocations = findErrorLocations(field, sigmaOmega[0]);\n        if (errorLocations == null) {\n            return null;\n        }\n        const errorMagnitudes = findErrorMagnitudes(field, sigmaOmega[1], errorLocations);\n        for (let i = 0; i < errorLocations.length; i++) {\n            const position = outputBytes.length - 1 - field.log(errorLocations[i]);\n            if (position < 0) {\n                return null;\n            }\n            outputBytes[position] = addOrSubtractGF(outputBytes[position], errorMagnitudes[i]);\n        }\n        return outputBytes;\n    }\n\n    const VERSIONS = [\n        {\n            infoBits: null,\n            versionNumber: 1,\n            alignmentPatternCenters: [],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 7,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 19 }],\n                },\n                {\n                    ecCodewordsPerBlock: 10,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n                },\n                {\n                    ecCodewordsPerBlock: 13,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 13 }],\n                },\n                {\n                    ecCodewordsPerBlock: 17,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 9 }],\n                },\n            ],\n        },\n        {\n            infoBits: null,\n            versionNumber: 2,\n            alignmentPatternCenters: [6, 18],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 10,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 34 }],\n                },\n                {\n                    ecCodewordsPerBlock: 16,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 28 }],\n                },\n                {\n                    ecCodewordsPerBlock: 22,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 22 }],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 16 }],\n                },\n            ],\n        },\n        {\n            infoBits: null,\n            versionNumber: 3,\n            alignmentPatternCenters: [6, 22],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 15,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 55 }],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 44 }],\n                },\n                {\n                    ecCodewordsPerBlock: 18,\n                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 17 }],\n                },\n                {\n                    ecCodewordsPerBlock: 22,\n                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 13 }],\n                },\n            ],\n        },\n        {\n            infoBits: null,\n            versionNumber: 4,\n            alignmentPatternCenters: [6, 26],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 20,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 80 }],\n                },\n                {\n                    ecCodewordsPerBlock: 18,\n                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 32 }],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 24 }],\n                },\n                {\n                    ecCodewordsPerBlock: 16,\n                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 9 }],\n                },\n            ],\n        },\n        {\n            infoBits: null,\n            versionNumber: 5,\n            alignmentPatternCenters: [6, 30],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [{ numBlocks: 1, dataCodewordsPerBlock: 108 }],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 43 }],\n                },\n                {\n                    ecCodewordsPerBlock: 18,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 22,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 11 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 12 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: null,\n            versionNumber: 6,\n            alignmentPatternCenters: [6, 34],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 18,\n                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 68 }],\n                },\n                {\n                    ecCodewordsPerBlock: 16,\n                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 27 }],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 19 }],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 15 }],\n                },\n            ],\n        },\n        {\n            infoBits: 0x07C94,\n            versionNumber: 7,\n            alignmentPatternCenters: [6, 22, 38],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 20,\n                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 78 }],\n                },\n                {\n                    ecCodewordsPerBlock: 18,\n                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 31 }],\n                },\n                {\n                    ecCodewordsPerBlock: 18,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 14 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x085BC,\n            versionNumber: 8,\n            alignmentPatternCenters: [6, 24, 42],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 97 }],\n                },\n                {\n                    ecCodewordsPerBlock: 22,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 38 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 39 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 22,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 18 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 19 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 14 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x09A99,\n            versionNumber: 9,\n            alignmentPatternCenters: [6, 26, 46],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [{ numBlocks: 2, dataCodewordsPerBlock: 116 }],\n                },\n                {\n                    ecCodewordsPerBlock: 22,\n                    ecBlocks: [\n                        { numBlocks: 3, dataCodewordsPerBlock: 36 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 20,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 16 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 13 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x0A4D3,\n            versionNumber: 10,\n            alignmentPatternCenters: [6, 28, 50],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 18,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 68 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 69 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 43 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 44 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 6, dataCodewordsPerBlock: 19 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 6, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x0BBF6,\n            versionNumber: 11,\n            alignmentPatternCenters: [6, 30, 54],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 20,\n                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 81 }],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 1, dataCodewordsPerBlock: 50 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 51 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 23 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 3, dataCodewordsPerBlock: 12 },\n                        { numBlocks: 8, dataCodewordsPerBlock: 13 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x0C762,\n            versionNumber: 12,\n            alignmentPatternCenters: [6, 32, 58],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 92 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 93 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 22,\n                    ecBlocks: [\n                        { numBlocks: 6, dataCodewordsPerBlock: 36 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 37 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 20 },\n                        { numBlocks: 6, dataCodewordsPerBlock: 21 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 7, dataCodewordsPerBlock: 14 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 15 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x0D847,\n            versionNumber: 13,\n            alignmentPatternCenters: [6, 34, 62],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [{ numBlocks: 4, dataCodewordsPerBlock: 107 }],\n                },\n                {\n                    ecCodewordsPerBlock: 22,\n                    ecBlocks: [\n                        { numBlocks: 8, dataCodewordsPerBlock: 37 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 38 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 8, dataCodewordsPerBlock: 20 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 21 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 22,\n                    ecBlocks: [\n                        { numBlocks: 12, dataCodewordsPerBlock: 11 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 12 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x0E60D,\n            versionNumber: 14,\n            alignmentPatternCenters: [6, 26, 46, 66],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 3, dataCodewordsPerBlock: 115 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 40 },\n                        { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 20,\n                    ecBlocks: [\n                        { numBlocks: 11, dataCodewordsPerBlock: 16 },\n                        { numBlocks: 5, dataCodewordsPerBlock: 17 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                        { numBlocks: 5, dataCodewordsPerBlock: 13 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x0F928,\n            versionNumber: 15,\n            alignmentPatternCenters: [6, 26, 48, 70],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 22,\n                    ecBlocks: [\n                        { numBlocks: 5, dataCodewordsPerBlock: 87 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 88 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 5, dataCodewordsPerBlock: 41 },\n                        { numBlocks: 5, dataCodewordsPerBlock: 42 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 5, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 11, dataCodewordsPerBlock: 12 },\n                        { numBlocks: 7, dataCodewordsPerBlock: 13 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x10B78,\n            versionNumber: 16,\n            alignmentPatternCenters: [6, 26, 50, 74],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 5, dataCodewordsPerBlock: 98 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 99 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 7, dataCodewordsPerBlock: 45 },\n                        { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [\n                        { numBlocks: 15, dataCodewordsPerBlock: 19 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 20 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 3, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x1145D,\n            versionNumber: 17,\n            alignmentPatternCenters: [6, 30, 54, 78],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 1, dataCodewordsPerBlock: 107 },\n                        { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 47 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 1, dataCodewordsPerBlock: 22 },\n                        { numBlocks: 15, dataCodewordsPerBlock: 23 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                        { numBlocks: 17, dataCodewordsPerBlock: 15 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x12A17,\n            versionNumber: 18,\n            alignmentPatternCenters: [6, 30, 56, 82],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 5, dataCodewordsPerBlock: 120 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 121 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [\n                        { numBlocks: 9, dataCodewordsPerBlock: 43 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 44 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 14 },\n                        { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x13532,\n            versionNumber: 19,\n            alignmentPatternCenters: [6, 30, 58, 86],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 3, dataCodewordsPerBlock: 113 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 114 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [\n                        { numBlocks: 3, dataCodewordsPerBlock: 44 },\n                        { numBlocks: 11, dataCodewordsPerBlock: 45 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [\n                        { numBlocks: 17, dataCodewordsPerBlock: 21 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 22 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [\n                        { numBlocks: 9, dataCodewordsPerBlock: 13 },\n                        { numBlocks: 16, dataCodewordsPerBlock: 14 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x149A6,\n            versionNumber: 20,\n            alignmentPatternCenters: [6, 34, 62, 90],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 3, dataCodewordsPerBlock: 107 },\n                        { numBlocks: 5, dataCodewordsPerBlock: 108 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [\n                        { numBlocks: 3, dataCodewordsPerBlock: 41 },\n                        { numBlocks: 13, dataCodewordsPerBlock: 42 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 5, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 15, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 10, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x15683,\n            versionNumber: 21,\n            alignmentPatternCenters: [6, 28, 50, 72, 94],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 116 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 117 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 42 }],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 17, dataCodewordsPerBlock: 22 },\n                        { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 19, dataCodewordsPerBlock: 16 },\n                        { numBlocks: 6, dataCodewordsPerBlock: 17 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x168C9,\n            versionNumber: 22,\n            alignmentPatternCenters: [6, 26, 50, 74, 98],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 111 },\n                        { numBlocks: 7, dataCodewordsPerBlock: 112 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 46 }],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 24,\n                    ecBlocks: [{ numBlocks: 34, dataCodewordsPerBlock: 13 }],\n                },\n            ],\n        },\n        {\n            infoBits: 0x177EC,\n            versionNumber: 23,\n            alignmentPatternCenters: [6, 30, 54, 74, 102],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 121 },\n                        { numBlocks: 5, dataCodewordsPerBlock: 122 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                        { numBlocks: 14, dataCodewordsPerBlock: 48 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 16, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 14, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x18EC4,\n            versionNumber: 24,\n            alignmentPatternCenters: [6, 28, 54, 80, 106],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 6, dataCodewordsPerBlock: 117 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 6, dataCodewordsPerBlock: 45 },\n                        { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 11, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 16, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 30, dataCodewordsPerBlock: 16 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 17 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x191E1,\n            versionNumber: 25,\n            alignmentPatternCenters: [6, 32, 58, 84, 110],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 26,\n                    ecBlocks: [\n                        { numBlocks: 8, dataCodewordsPerBlock: 106 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 107 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 8, dataCodewordsPerBlock: 47 },\n                        { numBlocks: 13, dataCodewordsPerBlock: 48 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 7, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 13, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x1AFAB,\n            versionNumber: 26,\n            alignmentPatternCenters: [6, 30, 58, 86, 114],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 10, dataCodewordsPerBlock: 114 },\n                        { numBlocks: 2, dataCodewordsPerBlock: 115 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 19, dataCodewordsPerBlock: 46 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 47 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 28, dataCodewordsPerBlock: 22 },\n                        { numBlocks: 6, dataCodewordsPerBlock: 23 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 33, dataCodewordsPerBlock: 16 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 17 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x1B08E,\n            versionNumber: 27,\n            alignmentPatternCenters: [6, 34, 62, 90, 118],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 8, dataCodewordsPerBlock: 122 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 22, dataCodewordsPerBlock: 45 },\n                        { numBlocks: 3, dataCodewordsPerBlock: 46 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 8, dataCodewordsPerBlock: 23 },\n                        { numBlocks: 26, dataCodewordsPerBlock: 24 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 12, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x1CC1A,\n            versionNumber: 28,\n            alignmentPatternCenters: [6, 26, 50, 74, 98, 122],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 3, dataCodewordsPerBlock: 117 },\n                        { numBlocks: 10, dataCodewordsPerBlock: 118 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 3, dataCodewordsPerBlock: 45 },\n                        { numBlocks: 23, dataCodewordsPerBlock: 46 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 31, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 31, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x1D33F,\n            versionNumber: 29,\n            alignmentPatternCenters: [6, 30, 54, 78, 102, 126],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 7, dataCodewordsPerBlock: 116 },\n                        { numBlocks: 7, dataCodewordsPerBlock: 117 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 21, dataCodewordsPerBlock: 45 },\n                        { numBlocks: 7, dataCodewordsPerBlock: 46 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 1, dataCodewordsPerBlock: 23 },\n                        { numBlocks: 37, dataCodewordsPerBlock: 24 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 26, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x1ED75,\n            versionNumber: 30,\n            alignmentPatternCenters: [6, 26, 52, 78, 104, 130],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 5, dataCodewordsPerBlock: 115 },\n                        { numBlocks: 10, dataCodewordsPerBlock: 116 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 19, dataCodewordsPerBlock: 47 },\n                        { numBlocks: 10, dataCodewordsPerBlock: 48 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 15, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 25, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 25, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x1F250,\n            versionNumber: 31,\n            alignmentPatternCenters: [6, 30, 56, 82, 108, 134],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                        { numBlocks: 3, dataCodewordsPerBlock: 116 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 46 },\n                        { numBlocks: 29, dataCodewordsPerBlock: 47 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 42, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 23, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 28, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x209D5,\n            versionNumber: 32,\n            alignmentPatternCenters: [6, 34, 60, 86, 112, 138],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [{ numBlocks: 17, dataCodewordsPerBlock: 115 }],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 10, dataCodewordsPerBlock: 46 },\n                        { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 10, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 35, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 19, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 35, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x216F0,\n            versionNumber: 33,\n            alignmentPatternCenters: [6, 30, 58, 86, 114, 142],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 17, dataCodewordsPerBlock: 115 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 116 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                        { numBlocks: 21, dataCodewordsPerBlock: 47 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 29, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 19, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 11, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x228BA,\n            versionNumber: 34,\n            alignmentPatternCenters: [6, 34, 62, 90, 118, 146],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 13, dataCodewordsPerBlock: 115 },\n                        { numBlocks: 6, dataCodewordsPerBlock: 116 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 14, dataCodewordsPerBlock: 46 },\n                        { numBlocks: 23, dataCodewordsPerBlock: 47 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 44, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 7, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 59, dataCodewordsPerBlock: 16 },\n                        { numBlocks: 1, dataCodewordsPerBlock: 17 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x2379F,\n            versionNumber: 35,\n            alignmentPatternCenters: [6, 30, 54, 78, 102, 126, 150],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 12, dataCodewordsPerBlock: 121 },\n                        { numBlocks: 7, dataCodewordsPerBlock: 122 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 12, dataCodewordsPerBlock: 47 },\n                        { numBlocks: 26, dataCodewordsPerBlock: 48 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 39, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 22, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 41, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x24B0B,\n            versionNumber: 36,\n            alignmentPatternCenters: [6, 24, 50, 76, 102, 128, 154],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 6, dataCodewordsPerBlock: 121 },\n                        { numBlocks: 14, dataCodewordsPerBlock: 122 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 6, dataCodewordsPerBlock: 47 },\n                        { numBlocks: 34, dataCodewordsPerBlock: 48 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 46, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 2, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 64, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x2542E,\n            versionNumber: 37,\n            alignmentPatternCenters: [6, 28, 54, 80, 106, 132, 158],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 17, dataCodewordsPerBlock: 122 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 123 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 29, dataCodewordsPerBlock: 46 },\n                        { numBlocks: 14, dataCodewordsPerBlock: 47 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 49, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 10, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 24, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 46, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x26A64,\n            versionNumber: 38,\n            alignmentPatternCenters: [6, 32, 58, 84, 110, 136, 162],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 4, dataCodewordsPerBlock: 122 },\n                        { numBlocks: 18, dataCodewordsPerBlock: 123 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 13, dataCodewordsPerBlock: 46 },\n                        { numBlocks: 32, dataCodewordsPerBlock: 47 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 48, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 14, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 42, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 32, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x27541,\n            versionNumber: 39,\n            alignmentPatternCenters: [6, 26, 54, 82, 110, 138, 166],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 20, dataCodewordsPerBlock: 117 },\n                        { numBlocks: 4, dataCodewordsPerBlock: 118 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 40, dataCodewordsPerBlock: 47 },\n                        { numBlocks: 7, dataCodewordsPerBlock: 48 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 43, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 22, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 10, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 67, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n        {\n            infoBits: 0x28C69,\n            versionNumber: 40,\n            alignmentPatternCenters: [6, 30, 58, 86, 114, 142, 170],\n            errorCorrectionLevels: [\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 19, dataCodewordsPerBlock: 118 },\n                        { numBlocks: 6, dataCodewordsPerBlock: 119 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 28,\n                    ecBlocks: [\n                        { numBlocks: 18, dataCodewordsPerBlock: 47 },\n                        { numBlocks: 31, dataCodewordsPerBlock: 48 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 34, dataCodewordsPerBlock: 24 },\n                        { numBlocks: 34, dataCodewordsPerBlock: 25 },\n                    ],\n                },\n                {\n                    ecCodewordsPerBlock: 30,\n                    ecBlocks: [\n                        { numBlocks: 20, dataCodewordsPerBlock: 15 },\n                        { numBlocks: 61, dataCodewordsPerBlock: 16 },\n                    ],\n                },\n            ],\n        },\n    ];\n\n// tslint:disable:no-bitwise\n    function numBitsDiffering(x, y) {\n        let z = x ^ y;\n        let bitCount = 0;\n        while (z) {\n            bitCount++;\n            z &= z - 1;\n        }\n        return bitCount;\n    }\n    function pushBit(bit, byte) {\n        return (byte << 1) | bit;\n    }\n// tslint:enable:no-bitwise\n    const FORMAT_INFO_TABLE = [\n        { bits: 0x5412, formatInfo: { errorCorrectionLevel: 1, dataMask: 0 } },\n        { bits: 0x5125, formatInfo: { errorCorrectionLevel: 1, dataMask: 1 } },\n        { bits: 0x5E7C, formatInfo: { errorCorrectionLevel: 1, dataMask: 2 } },\n        { bits: 0x5B4B, formatInfo: { errorCorrectionLevel: 1, dataMask: 3 } },\n        { bits: 0x45F9, formatInfo: { errorCorrectionLevel: 1, dataMask: 4 } },\n        { bits: 0x40CE, formatInfo: { errorCorrectionLevel: 1, dataMask: 5 } },\n        { bits: 0x4F97, formatInfo: { errorCorrectionLevel: 1, dataMask: 6 } },\n        { bits: 0x4AA0, formatInfo: { errorCorrectionLevel: 1, dataMask: 7 } },\n        { bits: 0x77C4, formatInfo: { errorCorrectionLevel: 0, dataMask: 0 } },\n        { bits: 0x72F3, formatInfo: { errorCorrectionLevel: 0, dataMask: 1 } },\n        { bits: 0x7DAA, formatInfo: { errorCorrectionLevel: 0, dataMask: 2 } },\n        { bits: 0x789D, formatInfo: { errorCorrectionLevel: 0, dataMask: 3 } },\n        { bits: 0x662F, formatInfo: { errorCorrectionLevel: 0, dataMask: 4 } },\n        { bits: 0x6318, formatInfo: { errorCorrectionLevel: 0, dataMask: 5 } },\n        { bits: 0x6C41, formatInfo: { errorCorrectionLevel: 0, dataMask: 6 } },\n        { bits: 0x6976, formatInfo: { errorCorrectionLevel: 0, dataMask: 7 } },\n        { bits: 0x1689, formatInfo: { errorCorrectionLevel: 3, dataMask: 0 } },\n        { bits: 0x13BE, formatInfo: { errorCorrectionLevel: 3, dataMask: 1 } },\n        { bits: 0x1CE7, formatInfo: { errorCorrectionLevel: 3, dataMask: 2 } },\n        { bits: 0x19D0, formatInfo: { errorCorrectionLevel: 3, dataMask: 3 } },\n        { bits: 0x0762, formatInfo: { errorCorrectionLevel: 3, dataMask: 4 } },\n        { bits: 0x0255, formatInfo: { errorCorrectionLevel: 3, dataMask: 5 } },\n        { bits: 0x0D0C, formatInfo: { errorCorrectionLevel: 3, dataMask: 6 } },\n        { bits: 0x083B, formatInfo: { errorCorrectionLevel: 3, dataMask: 7 } },\n        { bits: 0x355F, formatInfo: { errorCorrectionLevel: 2, dataMask: 0 } },\n        { bits: 0x3068, formatInfo: { errorCorrectionLevel: 2, dataMask: 1 } },\n        { bits: 0x3F31, formatInfo: { errorCorrectionLevel: 2, dataMask: 2 } },\n        { bits: 0x3A06, formatInfo: { errorCorrectionLevel: 2, dataMask: 3 } },\n        { bits: 0x24B4, formatInfo: { errorCorrectionLevel: 2, dataMask: 4 } },\n        { bits: 0x2183, formatInfo: { errorCorrectionLevel: 2, dataMask: 5 } },\n        { bits: 0x2EDA, formatInfo: { errorCorrectionLevel: 2, dataMask: 6 } },\n        { bits: 0x2BED, formatInfo: { errorCorrectionLevel: 2, dataMask: 7 } },\n    ];\n    const DATA_MASKS = [\n        (p) => ((p.y + p.x) % 2) === 0,\n        (p) => (p.y % 2) === 0,\n        (p) => p.x % 3 === 0,\n        (p) => (p.y + p.x) % 3 === 0,\n        (p) => (Math.floor(p.y / 2) + Math.floor(p.x / 3)) % 2 === 0,\n        (p) => ((p.x * p.y) % 2) + ((p.x * p.y) % 3) === 0,\n        (p) => ((((p.y * p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,\n        (p) => ((((p.y + p.x) % 2) + (p.y * p.x) % 3) % 2) === 0,\n    ];\n    function buildFunctionPatternMask(version) {\n        const dimension = 17 + 4 * version.versionNumber;\n        const matrix = BitMatrix.createEmpty(dimension, dimension);\n        matrix.setRegion(0, 0, 9, 9, true); // Top left finder pattern + separator + format\n        matrix.setRegion(dimension - 8, 0, 8, 9, true); // Top right finder pattern + separator + format\n        matrix.setRegion(0, dimension - 8, 9, 8, true); // Bottom left finder pattern + separator + format\n        // Alignment patterns\n        for (const x of version.alignmentPatternCenters) {\n            for (const y of version.alignmentPatternCenters) {\n                if (!(x === 6 && y === 6 || x === 6 && y === dimension - 7 || x === dimension - 7 && y === 6)) {\n                    matrix.setRegion(x - 2, y - 2, 5, 5, true);\n                }\n            }\n        }\n        matrix.setRegion(6, 9, 1, dimension - 17, true); // Vertical timing pattern\n        matrix.setRegion(9, 6, dimension - 17, 1, true); // Horizontal timing pattern\n        if (version.versionNumber > 6) {\n            matrix.setRegion(dimension - 11, 0, 3, 6, true); // Version info, top right\n            matrix.setRegion(0, dimension - 11, 6, 3, true); // Version info, bottom left\n        }\n        return matrix;\n    }\n    function readCodewords(matrix, version, formatInfo) {\n        const dataMask = DATA_MASKS[formatInfo.dataMask];\n        const dimension = matrix.height;\n        const functionPatternMask = buildFunctionPatternMask(version);\n        const codewords = [];\n        let currentByte = 0;\n        let bitsRead = 0;\n        // Read columns in pairs, from right to left\n        let readingUp = true;\n        for (let columnIndex = dimension - 1; columnIndex > 0; columnIndex -= 2) {\n            if (columnIndex === 6) { // Skip whole column with vertical alignment pattern;\n                columnIndex--;\n            }\n            for (let i = 0; i < dimension; i++) {\n                const y = readingUp ? dimension - 1 - i : i;\n                for (let columnOffset = 0; columnOffset < 2; columnOffset++) {\n                    const x = columnIndex - columnOffset;\n                    if (!functionPatternMask.get(x, y)) {\n                        bitsRead++;\n                        let bit = matrix.get(x, y);\n                        if (dataMask({ y, x })) {\n                            bit = !bit;\n                        }\n                        currentByte = pushBit(bit, currentByte);\n                        if (bitsRead === 8) { // Whole bytes\n                            codewords.push(currentByte);\n                            bitsRead = 0;\n                            currentByte = 0;\n                        }\n                    }\n                }\n            }\n            readingUp = !readingUp;\n        }\n        return codewords;\n    }\n    function readVersion(matrix) {\n        const dimension = matrix.height;\n        const provisionalVersion = Math.floor((dimension - 17) / 4);\n        if (provisionalVersion <= 6) { // 6 and under dont have version info in the QR code\n            return VERSIONS[provisionalVersion - 1];\n        }\n        let topRightVersionBits = 0;\n        for (let y = 5; y >= 0; y--) {\n            for (let x = dimension - 9; x >= dimension - 11; x--) {\n                topRightVersionBits = pushBit(matrix.get(x, y), topRightVersionBits);\n            }\n        }\n        let bottomLeftVersionBits = 0;\n        for (let x = 5; x >= 0; x--) {\n            for (let y = dimension - 9; y >= dimension - 11; y--) {\n                bottomLeftVersionBits = pushBit(matrix.get(x, y), bottomLeftVersionBits);\n            }\n        }\n        let bestDifference = Infinity;\n        let bestVersion;\n        for (const version of VERSIONS) {\n            if (version.infoBits === topRightVersionBits || version.infoBits === bottomLeftVersionBits) {\n                return version;\n            }\n            let difference = numBitsDiffering(topRightVersionBits, version.infoBits);\n            if (difference < bestDifference) {\n                bestVersion = version;\n                bestDifference = difference;\n            }\n            difference = numBitsDiffering(bottomLeftVersionBits, version.infoBits);\n            if (difference < bestDifference) {\n                bestVersion = version;\n                bestDifference = difference;\n            }\n        }\n        // We can tolerate up to 3 bits of error since no two version info codewords will\n        // differ in less than 8 bits.\n        if (bestDifference <= 3) {\n            return bestVersion;\n        }\n    }\n    function readFormatInformation(matrix) {\n        let topLeftFormatInfoBits = 0;\n        for (let x = 0; x <= 8; x++) {\n            if (x !== 6) { // Skip timing pattern bit\n                topLeftFormatInfoBits = pushBit(matrix.get(x, 8), topLeftFormatInfoBits);\n            }\n        }\n        for (let y = 7; y >= 0; y--) {\n            if (y !== 6) { // Skip timing pattern bit\n                topLeftFormatInfoBits = pushBit(matrix.get(8, y), topLeftFormatInfoBits);\n            }\n        }\n        const dimension = matrix.height;\n        let topRightBottomRightFormatInfoBits = 0;\n        for (let y = dimension - 1; y >= dimension - 7; y--) { // bottom left\n            topRightBottomRightFormatInfoBits = pushBit(matrix.get(8, y), topRightBottomRightFormatInfoBits);\n        }\n        for (let x = dimension - 8; x < dimension; x++) { // top right\n            topRightBottomRightFormatInfoBits = pushBit(matrix.get(x, 8), topRightBottomRightFormatInfoBits);\n        }\n        let bestDifference = Infinity;\n        let bestFormatInfo = null;\n        for (const { bits, formatInfo } of FORMAT_INFO_TABLE) {\n            if (bits === topLeftFormatInfoBits || bits === topRightBottomRightFormatInfoBits) {\n                return formatInfo;\n            }\n            let difference = numBitsDiffering(topLeftFormatInfoBits, bits);\n            if (difference < bestDifference) {\n                bestFormatInfo = formatInfo;\n                bestDifference = difference;\n            }\n            if (topLeftFormatInfoBits !== topRightBottomRightFormatInfoBits) { // also try the other option\n                difference = numBitsDiffering(topRightBottomRightFormatInfoBits, bits);\n                if (difference < bestDifference) {\n                    bestFormatInfo = formatInfo;\n                    bestDifference = difference;\n                }\n            }\n        }\n        // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits differing means we found a match\n        if (bestDifference <= 3) {\n            return bestFormatInfo;\n        }\n        return null;\n    }\n    function getDataBlocks(codewords, version, ecLevel) {\n        const ecInfo = version.errorCorrectionLevels[ecLevel];\n        const dataBlocks = [];\n        let totalCodewords = 0;\n        ecInfo.ecBlocks.forEach(block => {\n            for (let i = 0; i < block.numBlocks; i++) {\n                dataBlocks.push({ numDataCodewords: block.dataCodewordsPerBlock, codewords: [] });\n                totalCodewords += block.dataCodewordsPerBlock + ecInfo.ecCodewordsPerBlock;\n            }\n        });\n        // In some cases the QR code will be malformed enough that we pull off more or less than we should.\n        // If we pull off less there's nothing we can do.\n        // If we pull off more we can safely truncate\n        if (codewords.length < totalCodewords) {\n            return null;\n        }\n        codewords = codewords.slice(0, totalCodewords);\n        const shortBlockSize = ecInfo.ecBlocks[0].dataCodewordsPerBlock;\n        // Pull codewords to fill the blocks up to the minimum size\n        for (let i = 0; i < shortBlockSize; i++) {\n            for (const dataBlock of dataBlocks) {\n                dataBlock.codewords.push(codewords.shift());\n            }\n        }\n        // If there are any large blocks, pull codewords to fill the last element of those\n        if (ecInfo.ecBlocks.length > 1) {\n            const smallBlockCount = ecInfo.ecBlocks[0].numBlocks;\n            const largeBlockCount = ecInfo.ecBlocks[1].numBlocks;\n            for (let i = 0; i < largeBlockCount; i++) {\n                dataBlocks[smallBlockCount + i].codewords.push(codewords.shift());\n            }\n        }\n        // Add the rest of the codewords to the blocks. These are the error correction codewords.\n        while (codewords.length > 0) {\n            for (const dataBlock of dataBlocks) {\n                dataBlock.codewords.push(codewords.shift());\n            }\n        }\n        return dataBlocks;\n    }\n    function decodeMatrix(matrix) {\n        const version = readVersion(matrix);\n        if (!version) {\n            return null;\n        }\n        const formatInfo = readFormatInformation(matrix);\n        if (!formatInfo) {\n            return null;\n        }\n        const codewords = readCodewords(matrix, version, formatInfo);\n        const dataBlocks = getDataBlocks(codewords, version, formatInfo.errorCorrectionLevel);\n        if (!dataBlocks) {\n            return null;\n        }\n        // Count total number of data bytes\n        const totalBytes = dataBlocks.reduce((a, b) => a + b.numDataCodewords, 0);\n        const resultBytes = new Uint8ClampedArray(totalBytes);\n        let resultIndex = 0;\n        for (const dataBlock of dataBlocks) {\n            const correctedBytes = decode$1(dataBlock.codewords, dataBlock.codewords.length - dataBlock.numDataCodewords);\n            if (!correctedBytes) {\n                return null;\n            }\n            for (let i = 0; i < dataBlock.numDataCodewords; i++) {\n                resultBytes[resultIndex++] = correctedBytes[i];\n            }\n        }\n        try {\n            return decode(resultBytes, version.versionNumber);\n        }\n        catch (_a) {\n            return null;\n        }\n    }\n    function decode$2(matrix) {\n        if (matrix == null) {\n            return null;\n        }\n        const result = decodeMatrix(matrix);\n        if (result) {\n            return result;\n        }\n        // Decoding didn't work, try mirroring the QR across the topLeft -> bottomRight line.\n        for (let x = 0; x < matrix.width; x++) {\n            for (let y = x + 1; y < matrix.height; y++) {\n                if (matrix.get(x, y) !== matrix.get(y, x)) {\n                    matrix.set(x, y, !matrix.get(x, y));\n                    matrix.set(y, x, !matrix.get(y, x));\n                }\n            }\n        }\n        return decodeMatrix(matrix);\n    }\n\n    function squareToQuadrilateral(p1, p2, p3, p4) {\n        const dx3 = p1.x - p2.x + p3.x - p4.x;\n        const dy3 = p1.y - p2.y + p3.y - p4.y;\n        if (dx3 === 0 && dy3 === 0) { // Affine\n            return {\n                a11: p2.x - p1.x,\n                a12: p2.y - p1.y,\n                a13: 0,\n                a21: p3.x - p2.x,\n                a22: p3.y - p2.y,\n                a23: 0,\n                a31: p1.x,\n                a32: p1.y,\n                a33: 1,\n            };\n        }\n        else {\n            const dx1 = p2.x - p3.x;\n            const dx2 = p4.x - p3.x;\n            const dy1 = p2.y - p3.y;\n            const dy2 = p4.y - p3.y;\n            const denominator = dx1 * dy2 - dx2 * dy1;\n            const a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\n            const a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\n            return {\n                a11: p2.x - p1.x + a13 * p2.x,\n                a12: p2.y - p1.y + a13 * p2.y,\n                a13,\n                a21: p4.x - p1.x + a23 * p4.x,\n                a22: p4.y - p1.y + a23 * p4.y,\n                a23,\n                a31: p1.x,\n                a32: p1.y,\n                a33: 1,\n            };\n        }\n    }\n    function quadrilateralToSquare(p1, p2, p3, p4) {\n        // Here, the adjoint serves as the inverse:\n        const sToQ = squareToQuadrilateral(p1, p2, p3, p4);\n        return {\n            a11: sToQ.a22 * sToQ.a33 - sToQ.a23 * sToQ.a32,\n            a12: sToQ.a13 * sToQ.a32 - sToQ.a12 * sToQ.a33,\n            a13: sToQ.a12 * sToQ.a23 - sToQ.a13 * sToQ.a22,\n            a21: sToQ.a23 * sToQ.a31 - sToQ.a21 * sToQ.a33,\n            a22: sToQ.a11 * sToQ.a33 - sToQ.a13 * sToQ.a31,\n            a23: sToQ.a13 * sToQ.a21 - sToQ.a11 * sToQ.a23,\n            a31: sToQ.a21 * sToQ.a32 - sToQ.a22 * sToQ.a31,\n            a32: sToQ.a12 * sToQ.a31 - sToQ.a11 * sToQ.a32,\n            a33: sToQ.a11 * sToQ.a22 - sToQ.a12 * sToQ.a21,\n        };\n    }\n    function times(a, b) {\n        return {\n            a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,\n            a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,\n            a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,\n            a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,\n            a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,\n            a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,\n            a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,\n            a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,\n            a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33,\n        };\n    }\n    function extract(image, location) {\n        const qToS = quadrilateralToSquare({ x: 3.5, y: 3.5 }, { x: location.dimension - 3.5, y: 3.5 }, { x: location.dimension - 6.5, y: location.dimension - 6.5 }, { x: 3.5, y: location.dimension - 3.5 });\n        const sToQ = squareToQuadrilateral(location.topLeft, location.topRight, location.alignmentPattern, location.bottomLeft);\n        const transform = times(sToQ, qToS);\n        const matrix = BitMatrix.createEmpty(location.dimension, location.dimension);\n        const mappingFunction = (x, y) => {\n            const denominator = transform.a13 * x + transform.a23 * y + transform.a33;\n            return {\n                x: (transform.a11 * x + transform.a21 * y + transform.a31) / denominator,\n                y: (transform.a12 * x + transform.a22 * y + transform.a32) / denominator,\n            };\n        };\n        for (let y = 0; y < location.dimension; y++) {\n            for (let x = 0; x < location.dimension; x++) {\n                const xValue = x + 0.5;\n                const yValue = y + 0.5;\n                const sourcePixel = mappingFunction(xValue, yValue);\n                matrix.set(x, y, image.get(Math.floor(sourcePixel.x), Math.floor(sourcePixel.y)));\n            }\n        }\n        return {\n            matrix,\n            mappingFunction,\n        };\n    }\n\n    const MAX_FINDERPATTERNS_TO_SEARCH = 4;\n    const MIN_QUAD_RATIO = 0.5;\n    const MAX_QUAD_RATIO = 1.5;\n    const distance = (a, b) => Math.sqrt(Math.pow((b.x - a.x), 2) + Math.pow((b.y - a.y), 2));\n    function sum(values) {\n        return values.reduce((a, b) => a + b);\n    }\n// Takes three finder patterns and organizes them into topLeft, topRight, etc\n    function reorderFinderPatterns(pattern1, pattern2, pattern3) {\n        // Find distances between pattern centers\n        const oneTwoDistance = distance(pattern1, pattern2);\n        const twoThreeDistance = distance(pattern2, pattern3);\n        const oneThreeDistance = distance(pattern1, pattern3);\n        let bottomLeft;\n        let topLeft;\n        let topRight;\n        // Assume one closest to other two is B; A and C will just be guesses at first\n        if (twoThreeDistance >= oneTwoDistance && twoThreeDistance >= oneThreeDistance) {\n            [bottomLeft, topLeft, topRight] = [pattern2, pattern1, pattern3];\n        }\n        else if (oneThreeDistance >= twoThreeDistance && oneThreeDistance >= oneTwoDistance) {\n            [bottomLeft, topLeft, topRight] = [pattern1, pattern2, pattern3];\n        }\n        else {\n            [bottomLeft, topLeft, topRight] = [pattern1, pattern3, pattern2];\n        }\n        // Use cross product to figure out whether bottomLeft (A) and topRight (C) are correct or flipped in relation to topLeft (B)\n        // This asks whether BC x BA has a positive z component, which is the arrangement we want. If it's negative, then\n        // we've got it flipped around and should swap topRight and bottomLeft.\n        if (((topRight.x - topLeft.x) * (bottomLeft.y - topLeft.y)) - ((topRight.y - topLeft.y) * (bottomLeft.x - topLeft.x)) < 0) {\n            [bottomLeft, topRight] = [topRight, bottomLeft];\n        }\n        return { bottomLeft, topLeft, topRight };\n    }\n// Computes the dimension (number of modules on a side) of the QR Code based on the position of the finder patterns\n    function computeDimension(topLeft, topRight, bottomLeft, matrix) {\n        const moduleSize = (sum(countBlackWhiteRun(topLeft, bottomLeft, matrix, 5)) / 7 + // Divide by 7 since the ratio is 1:1:3:1:1\n            sum(countBlackWhiteRun(topLeft, topRight, matrix, 5)) / 7 +\n            sum(countBlackWhiteRun(bottomLeft, topLeft, matrix, 5)) / 7 +\n            sum(countBlackWhiteRun(topRight, topLeft, matrix, 5)) / 7) / 4;\n        if (moduleSize < 1) {\n            throw new Error(\"Invalid module size\");\n        }\n        const topDimension = Math.round(distance(topLeft, topRight) / moduleSize);\n        const sideDimension = Math.round(distance(topLeft, bottomLeft) / moduleSize);\n        let dimension = Math.floor((topDimension + sideDimension) / 2) + 7;\n        switch (dimension % 4) {\n            case 0:\n                dimension++;\n                break;\n            case 2:\n                dimension--;\n                break;\n        }\n        return { dimension, moduleSize };\n    }\n// Takes an origin point and an end point and counts the sizes of the black white run from the origin towards the end point.\n// Returns an array of elements, representing the pixel size of the black white run.\n// Uses a variant of http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n    function countBlackWhiteRunTowardsPoint(origin, end, matrix, length) {\n        const switchPoints = [{ x: Math.floor(origin.x), y: Math.floor(origin.y) }];\n        const steep = Math.abs(end.y - origin.y) > Math.abs(end.x - origin.x);\n        let fromX;\n        let fromY;\n        let toX;\n        let toY;\n        if (steep) {\n            fromX = Math.floor(origin.y);\n            fromY = Math.floor(origin.x);\n            toX = Math.floor(end.y);\n            toY = Math.floor(end.x);\n        }\n        else {\n            fromX = Math.floor(origin.x);\n            fromY = Math.floor(origin.y);\n            toX = Math.floor(end.x);\n            toY = Math.floor(end.y);\n        }\n        const dx = Math.abs(toX - fromX);\n        const dy = Math.abs(toY - fromY);\n        let error = Math.floor(-dx / 2);\n        const xStep = fromX < toX ? 1 : -1;\n        const yStep = fromY < toY ? 1 : -1;\n        let currentPixel = true;\n        // Loop up until x == toX, but not beyond\n        for (let x = fromX, y = fromY; x !== toX + xStep; x += xStep) {\n            // Does current pixel mean we have moved white to black or vice versa?\n            // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n            // color, advance to next state or end if we are in state 2 already\n            const realX = steep ? y : x;\n            const realY = steep ? x : y;\n            if (matrix.get(realX, realY) !== currentPixel) {\n                currentPixel = !currentPixel;\n                switchPoints.push({ x: realX, y: realY });\n                if (switchPoints.length === length + 1) {\n                    break;\n                }\n            }\n            error += dy;\n            if (error > 0) {\n                if (y === toY) {\n                    break;\n                }\n                y += yStep;\n                error -= dx;\n            }\n        }\n        const distances = [];\n        for (let i = 0; i < length; i++) {\n            if (switchPoints[i] && switchPoints[i + 1]) {\n                distances.push(distance(switchPoints[i], switchPoints[i + 1]));\n            }\n            else {\n                distances.push(0);\n            }\n        }\n        return distances;\n    }\n// Takes an origin point and an end point and counts the sizes of the black white run in the origin point\n// along the line that intersects with the end point. Returns an array of elements, representing the pixel sizes\n// of the black white run. Takes a length which represents the number of switches from black to white to look for.\n    function countBlackWhiteRun(origin, end, matrix, length) {\n        const rise = end.y - origin.y;\n        const run = end.x - origin.x;\n        const towardsEnd = countBlackWhiteRunTowardsPoint(origin, end, matrix, Math.ceil(length / 2));\n        const awayFromEnd = countBlackWhiteRunTowardsPoint(origin, { x: origin.x - run, y: origin.y - rise }, matrix, Math.ceil(length / 2));\n        const middleValue = towardsEnd.shift() + awayFromEnd.shift() - 1; // Substract one so we don't double count a pixel\n        return awayFromEnd.concat(middleValue).concat(...towardsEnd);\n    }\n// Takes in a black white run and an array of expected ratios. Returns the average size of the run as well as the \"error\" -\n// that is the amount the run diverges from the expected ratio\n    function scoreBlackWhiteRun(sequence, ratios) {\n        const averageSize = sum(sequence) / sum(ratios);\n        let error = 0;\n        ratios.forEach((ratio, i) => {\n            error += Math.pow((sequence[i] - ratio * averageSize), 2);\n        });\n        return { averageSize, error };\n    }\n// Takes an X,Y point and an array of sizes and scores the point against those ratios.\n// For example for a finder pattern takes the ratio list of 1:1:3:1:1 and checks horizontal, vertical and diagonal ratios\n// against that.\n    function scorePattern(point, ratios, matrix) {\n        try {\n            const horizontalRun = countBlackWhiteRun(point, { x: -1, y: point.y }, matrix, ratios.length);\n            const verticalRun = countBlackWhiteRun(point, { x: point.x, y: -1 }, matrix, ratios.length);\n            const topLeftPoint = {\n                x: Math.max(0, point.x - point.y) - 1,\n                y: Math.max(0, point.y - point.x) - 1,\n            };\n            const topLeftBottomRightRun = countBlackWhiteRun(point, topLeftPoint, matrix, ratios.length);\n            const bottomLeftPoint = {\n                x: Math.min(matrix.width, point.x + point.y) + 1,\n                y: Math.min(matrix.height, point.y + point.x) + 1,\n            };\n            const bottomLeftTopRightRun = countBlackWhiteRun(point, bottomLeftPoint, matrix, ratios.length);\n            const horzError = scoreBlackWhiteRun(horizontalRun, ratios);\n            const vertError = scoreBlackWhiteRun(verticalRun, ratios);\n            const diagDownError = scoreBlackWhiteRun(topLeftBottomRightRun, ratios);\n            const diagUpError = scoreBlackWhiteRun(bottomLeftTopRightRun, ratios);\n            const ratioError = Math.sqrt(horzError.error * horzError.error +\n                vertError.error * vertError.error +\n                diagDownError.error * diagDownError.error +\n                diagUpError.error * diagUpError.error);\n            const avgSize = (horzError.averageSize + vertError.averageSize + diagDownError.averageSize + diagUpError.averageSize) / 4;\n            const sizeError = (Math.pow((horzError.averageSize - avgSize), 2) +\n                Math.pow((vertError.averageSize - avgSize), 2) +\n                Math.pow((diagDownError.averageSize - avgSize), 2) +\n                Math.pow((diagUpError.averageSize - avgSize), 2)) / avgSize;\n            return ratioError + sizeError;\n        }\n        catch (_a) {\n            return Infinity;\n        }\n    }\n    function locate(matrix) {\n        const finderPatternQuads = [];\n        let activeFinderPatternQuads = [];\n        const alignmentPatternQuads = [];\n        let activeAlignmentPatternQuads = [];\n        for (let y = 0; y <= matrix.height; y++) {\n            let length = 0;\n            let lastBit = false;\n            let scans = [0, 0, 0, 0, 0];\n            for (let x = -1; x <= matrix.width; x++) {\n                const v = matrix.get(x, y);\n                if (v === lastBit) {\n                    length++;\n                }\n                else {\n                    scans = [scans[1], scans[2], scans[3], scans[4], length];\n                    length = 1;\n                    lastBit = v;\n                    // Do the last 5 color changes ~ match the expected ratio for a finder pattern? 1:1:3:1:1 of b:w:b:w:b\n                    const averageFinderPatternBlocksize = sum(scans) / 7;\n                    const validFinderPattern = Math.abs(scans[0] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                        Math.abs(scans[1] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                        Math.abs(scans[2] - 3 * averageFinderPatternBlocksize) < 3 * averageFinderPatternBlocksize &&\n                        Math.abs(scans[3] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                        Math.abs(scans[4] - averageFinderPatternBlocksize) < averageFinderPatternBlocksize &&\n                        !v; // And make sure the current pixel is white since finder patterns are bordered in white\n                    // Do the last 3 color changes ~ match the expected ratio for an alignment pattern? 1:1:1 of w:b:w\n                    const averageAlignmentPatternBlocksize = sum(scans.slice(-3)) / 3;\n                    const validAlignmentPattern = Math.abs(scans[2] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                        Math.abs(scans[3] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                        Math.abs(scans[4] - averageAlignmentPatternBlocksize) < averageAlignmentPatternBlocksize &&\n                        v; // Is the current pixel black since alignment patterns are bordered in black\n                    if (validFinderPattern) {\n                        // Compute the start and end x values of the large center black square\n                        const endX = x - scans[3] - scans[4];\n                        const startX = endX - scans[2];\n                        const line = { startX, endX, y };\n                        // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                        // that line as the starting point.\n                        const matchingQuads = activeFinderPatternQuads.filter(q => (startX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                            (endX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                            (startX <= q.bottom.startX && endX >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&\n                                (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO)));\n                        if (matchingQuads.length > 0) {\n                            matchingQuads[0].bottom = line;\n                        }\n                        else {\n                            activeFinderPatternQuads.push({ top: line, bottom: line });\n                        }\n                    }\n                    if (validAlignmentPattern) {\n                        // Compute the start and end x values of the center black square\n                        const endX = x - scans[4];\n                        const startX = endX - scans[3];\n                        const line = { startX, y, endX };\n                        // Is there a quad directly above the current spot? If so, extend it with the new line. Otherwise, create a new quad with\n                        // that line as the starting point.\n                        const matchingQuads = activeAlignmentPatternQuads.filter(q => (startX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                            (endX >= q.bottom.startX && startX <= q.bottom.endX) ||\n                            (startX <= q.bottom.startX && endX >= q.bottom.endX && ((scans[2] / (q.bottom.endX - q.bottom.startX)) < MAX_QUAD_RATIO &&\n                                (scans[2] / (q.bottom.endX - q.bottom.startX)) > MIN_QUAD_RATIO)));\n                        if (matchingQuads.length > 0) {\n                            matchingQuads[0].bottom = line;\n                        }\n                        else {\n                            activeAlignmentPatternQuads.push({ top: line, bottom: line });\n                        }\n                    }\n                }\n            }\n            finderPatternQuads.push(...activeFinderPatternQuads.filter(q => q.bottom.y !== y && q.bottom.y - q.top.y >= 2));\n            activeFinderPatternQuads = activeFinderPatternQuads.filter(q => q.bottom.y === y);\n            alignmentPatternQuads.push(...activeAlignmentPatternQuads.filter(q => q.bottom.y !== y));\n            activeAlignmentPatternQuads = activeAlignmentPatternQuads.filter(q => q.bottom.y === y);\n        }\n        finderPatternQuads.push(...activeFinderPatternQuads.filter(q => q.bottom.y - q.top.y >= 2));\n        alignmentPatternQuads.push(...activeAlignmentPatternQuads);\n        const finderPatternGroups = finderPatternQuads\n            .filter(q => q.bottom.y - q.top.y >= 2) // All quads must be at least 2px tall since the center square is larger than a block\n            .map(q => {\n                const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\n                const y = (q.top.y + q.bottom.y + 1) / 2;\n                if (!matrix.get(Math.round(x), Math.round(y))) {\n                    return;\n                }\n                const lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, q.bottom.y - q.top.y + 1];\n                const size = sum(lengths) / lengths.length;\n                const score = scorePattern({ x: Math.round(x), y: Math.round(y) }, [1, 1, 3, 1, 1], matrix);\n                return { score, x, y, size };\n            })\n            .filter(q => !!q) // Filter out any rejected quads from above\n            .sort((a, b) => a.score - b.score)\n            // Now take the top finder pattern options and try to find 2 other options with a similar size.\n            .map((point, i, finderPatterns) => {\n                if (i > MAX_FINDERPATTERNS_TO_SEARCH) {\n                    return null;\n                }\n                const otherPoints = finderPatterns\n                    .filter((p, ii) => i !== ii)\n                    .map(p => ({ x: p.x, y: p.y, score: p.score + (Math.pow((p.size - point.size), 2)) / point.size, size: p.size }))\n                    .sort((a, b) => a.score - b.score);\n                if (otherPoints.length < 2) {\n                    return null;\n                }\n                const score = point.score + otherPoints[0].score + otherPoints[1].score;\n                return { points: [point].concat(otherPoints.slice(0, 2)), score };\n            })\n            .filter(q => !!q) // Filter out any rejected finder patterns from above\n            .sort((a, b) => a.score - b.score);\n        if (finderPatternGroups.length === 0) {\n            return null;\n        }\n        const { topRight, topLeft, bottomLeft } = reorderFinderPatterns(finderPatternGroups[0].points[0], finderPatternGroups[0].points[1], finderPatternGroups[0].points[2]);\n        // Now that we've found the three finder patterns we can determine the blockSize and the size of the QR code.\n        // We'll use these to help find the alignment pattern but also later when we do the extraction.\n        let dimension;\n        let moduleSize;\n        try {\n            ({ dimension, moduleSize } = computeDimension(topLeft, topRight, bottomLeft, matrix));\n        }\n        catch (e) {\n            return null;\n        }\n        // Now find the alignment pattern\n        const bottomRightFinderPattern = {\n            x: topRight.x - topLeft.x + bottomLeft.x,\n            y: topRight.y - topLeft.y + bottomLeft.y,\n        };\n        const modulesBetweenFinderPatterns = ((distance(topLeft, bottomLeft) + distance(topLeft, topRight)) / 2 / moduleSize);\n        const correctionToTopLeft = 1 - (3 / modulesBetweenFinderPatterns);\n        const expectedAlignmentPattern = {\n            x: topLeft.x + correctionToTopLeft * (bottomRightFinderPattern.x - topLeft.x),\n            y: topLeft.y + correctionToTopLeft * (bottomRightFinderPattern.y - topLeft.y),\n        };\n        const alignmentPatterns = alignmentPatternQuads\n            .map(q => {\n                const x = (q.top.startX + q.top.endX + q.bottom.startX + q.bottom.endX) / 4;\n                const y = (q.top.y + q.bottom.y + 1) / 2;\n                if (!matrix.get(Math.floor(x), Math.floor(y))) {\n                    return;\n                }\n                const lengths = [q.top.endX - q.top.startX, q.bottom.endX - q.bottom.startX, (q.bottom.y - q.top.y + 1)];\n                const size = sum(lengths) / lengths.length;\n                const sizeScore = scorePattern({ x: Math.floor(x), y: Math.floor(y) }, [1, 1, 1], matrix);\n                const score = sizeScore + distance({ x, y }, expectedAlignmentPattern);\n                return { x, y, score };\n            })\n            .filter(v => !!v)\n            .sort((a, b) => a.score - b.score);\n        // If there are less than 15 modules between finder patterns it's a version 1 QR code and as such has no alignmemnt pattern\n        // so we can only use our best guess.\n        const alignmentPattern = modulesBetweenFinderPatterns >= 15 && alignmentPatterns.length ? alignmentPatterns[0] : expectedAlignmentPattern;\n        return {\n            alignmentPattern: { x: alignmentPattern.x, y: alignmentPattern.y },\n            bottomLeft: { x: bottomLeft.x, y: bottomLeft.y },\n            dimension,\n            topLeft: { x: topLeft.x, y: topLeft.y },\n            topRight: { x: topRight.x, y: topRight.y },\n        };\n    }\n\n    function scan(matrix) {\n        const location = locate(matrix);\n        if (!location) {\n            return null;\n        }\n        const extracted = extract(matrix, location);\n        const decoded = decode$2(extracted.matrix);\n        if (!decoded) {\n            return null;\n        }\n        return {\n            binaryData: decoded.bytes,\n            data: decoded.text,\n            chunks: decoded.chunks,\n            location: {\n                topRightCorner: extracted.mappingFunction(location.dimension, 0),\n                topLeftCorner: extracted.mappingFunction(0, 0),\n                bottomRightCorner: extracted.mappingFunction(location.dimension, location.dimension),\n                bottomLeftCorner: extracted.mappingFunction(0, location.dimension),\n                topRightFinderPattern: location.topRight,\n                topLeftFinderPattern: location.topLeft,\n                bottomLeftFinderPattern: location.bottomLeft,\n                bottomRightAlignmentPattern: location.alignmentPattern,\n            },\n        };\n    }\n    const defaultOptions = {\n        inversionAttempts: \"attemptBoth\",\n        greyScaleWeights: {\n            red: 0.2126,\n            green: 0.7152,\n            blue: 0.0722,\n            useIntegerApproximation: false,\n        },\n        canOverwriteImage: true,\n    };\n    function mergeObject(target, src) {\n        Object.keys(src).forEach(opt => {\n            target[opt] = src[opt];\n        });\n    }\n    function jsQR(data, width, height, providedOptions = {}) {\n        const options = Object.create(null);\n        mergeObject(options, defaultOptions);\n        mergeObject(options, providedOptions);\n        const shouldInvert = options.inversionAttempts === \"attemptBoth\" || options.inversionAttempts === \"invertFirst\";\n        const tryInvertedFirst = options.inversionAttempts === \"onlyInvert\" || options.inversionAttempts === \"invertFirst\";\n        const { binarized, inverted } = binarize(data, width, height, shouldInvert, options.greyScaleWeights, options.canOverwriteImage);\n        let result = scan(tryInvertedFirst ? inverted : binarized);\n        if (!result && (options.inversionAttempts === \"attemptBoth\" || options.inversionAttempts === \"invertFirst\")) {\n            result = scan(tryInvertedFirst ? binarized : inverted);\n        }\n        return result;\n    }\n    jsQR.default = jsQR;\n\n\n\n\n// ######################################\n// ########### Worker code ##############\n// ######################################\n\n    self.onmessage = event => {\n        const type = event['data']['type'];\n        const data = event['data']['data'];\n\n        switch (type) {\n            case 'decode':\n                handleDecodeRequest(data);\n                break;\n            case 'close':\n                // close after earlier messages in the event loop finished processing\n                self.close();\n                break;\n        }\n    };\n\n    function handleDecodeRequest(data) {\n        const rgbaData = data['data'];\n        const width = data['width'];\n        const height = data['height'];\n        const result = jsQR(rgbaData, width, height, {\n            inversionAttempts: 'attemptBoth',\n            greyScaleWeights: {\n                // equal weights as we're using files of all sorts of colors\n                red: 85,\n                green: 86,\n                blue: 85,\n                useIntegerApproximation: true,\n            },\n        });\n        self.postMessage({\n            type: 'qrResult',\n            data: result? result.data : null,\n        });\n    }\n})();\n"],"names":["decodeByte","stream","size","text","i","length","bytes","push","b","decodeURIComponent","map","substr","toString","join","_a","decode","data","version","chunks","available","mode","ModeByte","Terminator","result","ECI","readBits","type","Mode","assignmentNumber","Numeric","num","Error","a","c","numericResult","Alphanumeric","AlphanumericCharacterCodes","charCodeAt","alphanumericResult","Byte","byteResult","Kanji","Math","floor","k","kanjiResult","addOrSubtractGF","runEuclideanAlgorithm","field","R","degree","tLast","zero","t","one","r","rLast","isZero","rLastLast","q","dltInverse","addOrSubtract","buildMonomial","degreeDiff","scale","multiplyByMonomial","multiplyPoly","tLastLast","sigmaTildeAtZero","multiply","inverse","decode$1","twoS","outputBytes","set","error","s","syndromeCoefficients","evaluation","syndrome","sigmaOmega","numErrors","errorLocator","getCoefficient","errorCount","evaluateAt","errorLocations","denominator","j","xiInverse","errorEvaluator","generatorBase","position","numBitsDiffering","x","y","z","bitCount","pushBit","bit","byte","readCodewords","matrix","formatInfo","dimension","setRegion","versionNumber","bitsRead","currentByte","readingUp","columnIndex","columnOffset","get","dataMask","codewords","readVersion","provisionalVersion","VERSIONS","topRightVersionBits","bottomLeftVersionBits","bestDifference","Infinity","bestVersion","infoBits","difference","readFormatInformation","topLeftFormatInfoBits","topRightBottomRightFormatInfoBits","bestFormatInfo","bits","getDataBlocks","ecLevel","totalCodewords","ecInfo","ecBlocks","forEach","block","numBlocks","dataBlocks","numDataCodewords","dataCodewordsPerBlock","ecCodewordsPerBlock","slice","shortBlockSize","dataBlock","shift","largeBlockCount","smallBlockCount","decodeMatrix","errorCorrectionLevel","resultIndex","correctedBytes","resultBytes","squareToQuadrilateral","p1","p2","p3","p4","dx3","dy3","a11","a12","a13","a21","a22","a23","a31","a32","a33","quadrilateralToSquare","sToQ","extract","image","location","topRight","alignmentPattern","bottomLeft","qToS","sourcePixel","mappingFunction","sum","values","reduce","reorderFinderPatterns","pattern1","pattern2","pattern3","topLeft","twoThreeDistance","oneTwoDistance","oneThreeDistance","computeDimension","countBlackWhiteRun","moduleSize","topDimension","sideDimension","countBlackWhiteRunTowardsPoint","origin","end","steep","fromX","fromY","toX","toY","dx","currentPixel","xStep","realX","realY","switchPoints","dy","yStep","distances","distance","ceil","awayFromEnd","concat","middleValue","towardsEnd","scoreBlackWhiteRun","sequence","ratios","ratio","pow","averageSize","scorePattern","point","max","min","width","height","vertError","diagDownError","diagUpError","horzError","avgSize","locate","activeFinderPatternQuads","activeAlignmentPatternQuads","lastBit","scans","v","abs","averageFinderPatternBlocksize","averageAlignmentPatternBlocksize","validFinderPattern","startX","endX","bottom","matchingQuads","line","top","validAlignmentPattern","finderPatternQuads","filter","alignmentPatternQuads","round","lengths","score","finderPatterns","otherPoints","p","ii","sort","points","finderPatternGroups","e","correctionToTopLeft","sizeScore","expectedAlignmentPattern","scan","decoded","binaryData","topRightCorner","extracted","topLeftCorner","bottomRightCorner","bottomLeftCorner","topRightFinderPattern","topLeftFinderPattern","bottomLeftFinderPattern","bottomRightAlignmentPattern","mergeObject","target","src","Object","keys","opt","jsQR","providedOptions","options","defaultOptions","shouldInvert","greyScaleWeights","canOverwriteImage","pixelCount","bufferOffset","greyscaleBuffer","Uint8ClampedArray","buffer","greyscaleWeights","useIntegerApproximation","greyscalePixels","red","green","blue","blackPointsBuffer","blackPointsCount","verticalRegionCount","verticalRegion","hortizontalRegion","horizontalRegionCount","pixelLumosity","average","blackPoints","averageNeighborBlackPoint","binarized","BitMatrix","binarizedBuffer","createEmpty","inverted","returnInverted","invertedBuffer","xRegion","yRegion","left","lum","threshold","tryInvertedFirst","inversionAttempts","Matrix","bufferSize","value","BitStream","bitOffset","byteOffset","numBits","bitsToNotRead","toRead","GenericGFPoly","coefficients","coefficientsLength","firstNonZero","other","smallerCoefficients","largerCoefficients","lengthDiff","sumDiff","scalar","product","aLength","bLength","aCoeff","bCoefficients","coefficient","GenericGF","primitive","genBase","expTable","Array","logTable","from","alignmentPatternCenters","errorCorrectionLevels","default","self","onmessage","event","self.onmessage","postMessage","close"],"mappings":"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"}