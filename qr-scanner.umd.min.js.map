{"version":3,"file":"qr-scanner.umd.min.js","sources":["src/qr-scanner.js"],"sourcesContent":["/* eslint-disable prefer-promise-reject-errors, no-throw-literal */\n\nexport default class QrScanner {\n    /**\n     * @param {HTMLImageElement | string} imageOrUrl\n     * @param {object?} sourceRect\n     * @param {Worker?} givenWorker\n     * @param {HTMLCanvasElement?} canvas\n     * @param {boolean} [alsoTryWithoutSourceRect]\n     * @returns {Promise<string>}\n     */\n    static async scanImage(imageOrUrl, sourceRect = null, givenWorker = null, canvas = null,\n        alsoTryWithoutSourceRect = false) {\n        let createdNewWorker = false;\n        /** @type {Worker} */\n        let worker;\n        if (!givenWorker) {\n            worker = new Worker(QrScanner.WORKER_PATH);\n            createdNewWorker = true;\n        } else {\n            worker = givenWorker;\n        }\n        try {\n            return await new Promise((resolve, reject) => {\n                /** @type {number | undefined} */\n                let timeout;\n                /** @type {(e: ErrorEvent | Error | string) => any} */\n                let onError;\n                /**\n                 * @param {Event} event\n                 */\n                const onMessage = event => {\n                    // @ts-ignore\n                    if (event.data.type !== 'qrResult') {\n                        return;\n                    }\n                    worker.removeEventListener('message', onMessage);\n                    worker.removeEventListener('error', onError);\n                    window.clearTimeout(timeout);\n                    // @ts-ignore\n                    if (event.data.data !== null) {\n                        // @ts-ignore\n                        resolve(event.data.data);\n                    } else {\n                        reject('QR code not found.');\n                    }\n                };\n                /**\n                 * @param {ErrorEvent | Error | string} e\n                 */\n                onError = e => {\n                    worker.removeEventListener('message', onMessage);\n                    worker.removeEventListener('error', onError);\n                    window.clearTimeout(timeout);\n                    // eslint-disable-next-line no-nested-ternary\n                    const errorMessage = !e\n                        ? 'Unknown Error'\n                        : typeof e === 'string' ? e : e.message;\n                    reject(`Scanner error: ${errorMessage}`);\n                };\n                worker.addEventListener('message', onMessage);\n                worker.addEventListener('error', onError);\n                timeout = window.setTimeout(() => onError('timeout'), 3000);\n                QrScanner._loadImage(imageOrUrl).then(image => {\n                    const imageData = QrScanner._getImageData(image, sourceRect, canvas);\n                    worker.postMessage({\n                        type: 'decode',\n                        data: imageData,\n                    }, [imageData.data.buffer]);\n                }).catch(onError);\n            });\n        } catch (e) {\n            if (sourceRect && alsoTryWithoutSourceRect) {\n                return await QrScanner.scanImage(imageOrUrl, null, worker, canvas);\n            }\n            throw e;\n        } finally {\n            if (createdNewWorker) {\n                worker.postMessage({\n                    type: 'close',\n                });\n            }\n        }\n    }\n\n\n    /**\n     * @param {HTMLImageElement} image\n     * @param {object?} sourceRect\n     * @param {HTMLCanvasElement?} canvas\n     * @returns {ImageData}\n     */\n    static _getImageData(image, sourceRect = null, canvas = null) {\n        canvas = canvas || document.createElement('canvas');\n        const sourceRectX = sourceRect && sourceRect.x ? sourceRect.x : 0;\n        const sourceRectY = sourceRect && sourceRect.y ? sourceRect.y : 0;\n        // @ts-ignore\n        const sourceRectWidth = sourceRect && sourceRect.width ? sourceRect.width : image.width;\n        const sourceRectHeight = sourceRect && sourceRect.height ? sourceRect.height : image.height;\n        if (canvas.width !== sourceRectWidth || canvas.height !== sourceRectHeight) {\n            canvas.width = sourceRectWidth;\n            canvas.height = sourceRectHeight;\n        }\n        const context = canvas.getContext('2d', { alpha: false });\n        if (!context) throw ('Cannot get canvas 2D context');\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(\n            image,\n            sourceRectX,\n            sourceRectY,\n            sourceRectWidth,\n            sourceRectHeight,\n            0,\n            0,\n            canvas.width,\n            canvas.height,\n        );\n        return context.getImageData(0, 0, canvas.width, canvas.height);\n    }\n\n    /**\n     * @param {HTMLImageElement | string} imageOrUrl\n     * @returns {Promise<HTMLImageElement>}\n     */\n    static async _loadImage(imageOrUrl) {\n        let image;\n        if (imageOrUrl instanceof Image) {\n            image = imageOrUrl;\n        } else {\n            image = new Image();\n            image.src = imageOrUrl;\n        }\n        await QrScanner._awaitImageLoad(image);\n        return image;\n    }\n\n    /**\n     * @param {HTMLImageElement} image\n     */\n    static async _awaitImageLoad(image) {\n        if (image.complete && image.naturalWidth !== 0) {\n            // already loaded\n            return;\n        }\n        await new Promise((resolve, reject) => {\n            /** @type {EventListener} */\n            let onError;\n            const onLoad = () => { // eslint-disable-line require-jsdoc-except/require-jsdoc\n                image.removeEventListener('load', onLoad);\n                image.removeEventListener('error', onError);\n                resolve();\n            };\n            onError = () => {\n                image.removeEventListener('load', onLoad);\n                image.removeEventListener('error', onError);\n                reject('Image load error');\n            };\n            image.addEventListener('load', onLoad);\n            image.addEventListener('error', onError);\n        });\n    }\n}\nQrScanner.DEFAULT_CANVAS_SIZE = 400;\nQrScanner.WORKER_PATH = 'qr-scanner-worker.min.js';\n"],"names":[],"mappings":"iBAiBA,eAAA,EAAqB,iBAGT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}